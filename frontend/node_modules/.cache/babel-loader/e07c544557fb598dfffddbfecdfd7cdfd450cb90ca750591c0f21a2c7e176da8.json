{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\syucedag\\\\Desktop\\\\all_projects\\\\sevda\\\\mygit\\\\testApplication\\\\frontend\\\\src\\\\Components\\\\WebSocketComponent\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useMessage } from '../../Components/MessageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = () => {\n  _s();\n  const [isConnecting, setIsConnecting] = useState(true);\n  const {\n    socket,\n    setSocket\n  } = useMessage();\n  const {\n    USBList,\n    setUSBList\n  } = useMessage();\n  const {\n    ETHList,\n    setETHList\n  } = useMessage();\n  const navigate = useNavigate();\n  const connectWebSocket = () => {\n    console.log(\"Web\", isConnecting);\n    // if (isConnecting) return;\n\n    setIsConnecting(true);\n    const newSocket = new W3CWebSocket('ws://' + window.location.hostname + ':4000');\n    newSocket.onopen = () => {\n      console.log(\"WebSocket bağlantısı kuruldu.\");\n      navigate(\"\");\n      setSocket(newSocket);\n      setIsConnecting(false);\n    };\n    newSocket.onmessage = message => {\n      const jsonData = JSON.parse(message.data.toString());\n      console.log(jsonData);\n      switch (jsonData.Command) {\n        case \"USBList\":\n          setUSBList(jsonData.Data);\n          break;\n        case \"ETHList\":\n          setETHList(jsonData.Data);\n          break;\n\n        // case \"NetworkPriority\":\n        //   setNetworkPriority(message.data.toString());\n        //   break\n      }\n    };\n    newSocket.onerror = error => {\n      console.error(\"WebSocket hatası:\", error);\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket bağlantısı kapatıldı.\");\n      setSocket(null);\n      setIsConnecting(false);\n      setTimeout(() => {\n        connectWebSocket();\n      }, 1000);\n    };\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log(\"connectWebSocket...\");\n        connectWebSocket();\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n    return () => {\n      if (socket) {\n        console.log(\"WebSocket bağlantısı kapatıldı.\");\n        socket.close();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n_s(WebSocketComponent, \"OWy5UMvgag2BzZd9kQi6XL8UPuU=\", false, function () {\n  return [useMessage, useMessage, useMessage, useNavigate];\n});\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useState","w3cwebsocket","W3CWebSocket","useNavigate","useMessage","jsxDEV","_jsxDEV","WebSocketComponent","_s","isConnecting","setIsConnecting","socket","setSocket","USBList","setUSBList","ETHList","setETHList","navigate","connectWebSocket","console","log","newSocket","window","location","hostname","onopen","onmessage","message","jsonData","JSON","parse","data","toString","Command","Data","onerror","error","onclose","setTimeout","fetchData","close","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/syucedag/Desktop/all_projects/sevda/mygit/testApplication/frontend/src/Components/WebSocketComponent/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport LoadingProduct from \"../../assets/icons/loadingProduct.svg\";\r\nimport {useMessage} from '../../Components/MessageContext';\r\n\r\nconst WebSocketComponent = () => {\r\n  const [isConnecting, setIsConnecting] = useState(true);\r\n  const { socket, setSocket } = useMessage();\r\n  const { USBList, setUSBList } = useMessage();\r\n  const { ETHList, setETHList} = useMessage();\r\n  const navigate = useNavigate();\r\n\r\n  const connectWebSocket = () => {\r\n    console.log(\"Web\", isConnecting)\r\n    // if (isConnecting) return;\r\n\r\n    setIsConnecting(true);\r\n\r\n\r\n    const newSocket = new W3CWebSocket('ws://' + window.location.hostname + ':4000');\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket bağlantısı kuruldu.\");\r\n      navigate(\"\");\r\n      setSocket(newSocket);\r\n      setIsConnecting(false);\r\n    };\r\n\r\n    newSocket.onmessage = (message) => {\r\n      const jsonData = JSON.parse(message.data.toString());\r\n      console.log(jsonData);\r\n      switch (jsonData.Command) {\r\n        case \"USBList\":\r\n          setUSBList(jsonData.Data)\r\n          break\r\n        case \"ETHList\":\r\n          setETHList(jsonData.Data)\r\n          break\r\n\r\n        // case \"NetworkPriority\":\r\n        //   setNetworkPriority(message.data.toString());\r\n        //   break\r\n        \r\n        }\r\n    \r\n    };\r\n\r\n    newSocket.onerror = (error) => {\r\n      console.error(\"WebSocket hatası:\", error);\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket bağlantısı kapatıldı.\");\r\n      setSocket(null);\r\n      setIsConnecting(false);\r\n\r\n      setTimeout(() => {\r\n        connectWebSocket();\r\n      }, 1000);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log(\"connectWebSocket...\")\r\n        connectWebSocket();\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      if (socket) {\r\n        console.log(\"WebSocket bağlantısı kapatıldı.\");\r\n        socket.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default WebSocketComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}